{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Riven</p> <p>Riven is a powerful media management and streaming solution designed to integrate with various media servers and third-party services. It automates the process of finding, downloading, and organizing media content, making it instantly available for streaming through your preferred media server.</p> <ul> <li> <p> Easy Installation</p> <p>Get Riven up and running quickly with our comprehensive installation guide. Whether you're using Docker or running natively, we've got you covered.</p> <p> Installation Guide</p> </li> <li> <p> Powerful Configuration</p> <p>Customize Riven to fit your media management needs. Configure debrid services, media servers, and more with our user-friendly interface.</p> <p> Configuration Options</p> </li> <li> <p> ElfHosted \u2764\ufe0f</p> <p>ElfHosted is an open-source PaaS that provides all the \"plumbing\" (hosting, security, and updates, etc) for your self-hosted apps, leaving the fun stuff for you!</p> <p> Sponsored</p> <p>100% of your Riven subscription revenue goes directly to Riven developers! </p> <p> Check out ElfHosted</p> </li> <li> <p> Active Community</p> <p>Join our vibrant community for support, updates, and contributions. Collaborate with other users and developers to make Riven even better.</p> <p> Join the Discord</p> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Beta</p> <p>Riven is under active development, we are constantly working on new features and fixing bugs.</p> <p>Riven streamlines your media consumption experience by:</p> <ol> <li>Automatically discovering new content based on your preferences and watchlists.</li> <li>Efficiently searching for and downloading high-quality media files.</li> <li>Organizing your media library using a smart symlink system.</li> <li>Seamlessly integrating with your chosen media server for immediate streaming access.</li> <li>Providing a user-friendly web interface for easy management and configuration.</li> </ol> <p>Whether you're a casual viewer or a media enthusiast, Riven offers a powerful, automated solution to keep your media library up-to-date and easily accessible.</p>"},{"location":"#elfhosted","title":"ElfHosted","text":"<p>ElfHosted is a geeky open-source PaaS which provides all the \"plumbing\" (hosting, security, updates, etc) for your self-hosted apps.</p> <p>Curious how it works? Here's an explainer video! </p> <p>ElfHosted \u2764\ufe0f Riven 100%</p> <p>Riven is an \"Elf-icial\" app in the ElfHosted app catalogue - A whopping 100% of your subscription goes directly to Riven developers, who can usually be found in the #elf-riven channel in the ElfHosted Discord Server.</p> <p>ElfHosted \"Infinite Streaming\" bundles</p> <p>Riven comes pre-packaged with Zurg and your choice of Plex, Jellyfin, or Emby, and is available in the following convenient bundles:</p> <ul> <li>Starter Kit (quick and easy setup)</li> <li>Hobbit Bundle (12.5% dedicated node, GPU transcoding, 250Mbps shared, extra bundled apps, 22% off non-bundled)</li> <li>Ranger Bundle (25% dedicated node, GPU transcoding, 500Mbps shared, extra bundled apps, 44% off non-bundled)</li> <li>Halfling Bundle (50% dedicated node, GPU transcoding, 1Gbps shared, extra bundled apps, 66% off non-bundled)</li> <li>Nazgul Bundle (100% dedicated node, GPU transcoding, 1Gbps dedicated, extra bundled apps, 88% off non-bundled)</li> </ul>"},{"location":"#setup","title":"Setup","text":"<p>Before we begin, we need to set up the required folders and files for Riven.</p> <p>Grab the <code>docker-compose.yml</code> file from the installation guide and then <code>docker-compose up -d</code> to start the services.</p> <p>Note</p> <ul> <li>Linux: Riven only supports Linux-based operating systems.</li> <li>Windows: Riven only supports Windows Subsystem for Linux (WSL) in Windows.</li> <li>Rclone: Required to mount debrid service. Additionally, Zurg is preferred for Real-Debrid users. Learn more</li> <li>Media Server: Plex, Jellyfin, and Emby are supported.</li> <li>Docker: Required to run Riven in a containerized environment. Learn more</li> </ul> <p>Debrid Support</p> <p>Currently only Real-Debrid, All-Debrid and Torbox are supported. More services will be added in the future!</p>"},{"location":"#setup-directories","title":"Setup Directories","text":"<p>For detailed information on the various services and configurations available in Riven, please refer to the symlink page. This page will help you understand how to configure and manage your media library using symlinks. It will help you understand why we map the Riven volumes to <code>/mnt</code> and how you can modify this in the <code>docker-compose.yml</code> file for the best outcome.</p>"},{"location":"#installation","title":"Installation","text":"<p>Setup Rclone &amp; Symlink Paths First! </p> <p>This is incredibly important and must be setup first! When configuring the rclone mount path and library path, you need to make sure that the paths are correct for your system. More information can be found at the symlink page.</p> <p>If your debrid files are found in your rclone path, and you can successfully <code>ls -lh /mnt/zurg</code> your rclone path, you can skip this step.</p> <p><code>docker-compose.yml</code> file is used to run Riven in a containerized environment. It consists of three services:</p> <ol> <li><code>riven</code>: The main application (backend).</li> <li><code>riven-frontend</code>: The web interface (frontend).</li> <li><code>riven-db</code>: The database.</li> </ol> docker-compose.yml<pre><code>services:\n    riven-frontend:\n        image: spoked/riven-frontend:latest\n        container_name: riven-frontend\n        restart: unless-stopped\n        ports:\n            - \"3000:3000\"\n        tty: true\n        environment:\n            - PUID=1000\n            - PGID=1000\n            - TZ=America/New_York\n            - ORIGIN=http://localhost:3000\n            - BACKEND_URL=http://riven:8080\n            - DIALECT=postgres\n            - DATABASE_URL=postgres://postgres:postgres@riven-db/riven\n        depends_on:\n            riven:\n                condition: service_healthy\n\n    riven:\n        image: spoked/riven:latest\n        container_name: riven\n        restart: unless-stopped\n        ports:\n            - \"8080:8080\"\n        tty: true\n        environment:\n            - PUID=1000\n            - PGID=1000\n            - TZ=America/New_York\n            - RIVEN_FORCE_ENV=true\n            - RIVEN_DATABASE_HOST=postgresql+psycopg2://postgres:postgres@riven-db/riven\n        healthcheck:\n            test: curl -s http://localhost:8080 &gt;/dev/null || exit 1\n            interval: 30s\n            timeout: 10s\n            retries: 10\n        volumes:\n            - ./data:/riven/data\n            - /mnt:/mnt\n        depends_on:\n            riven_postgres:\n                condition: service_healthy\n\n    riven_postgres:\n        image: postgres:16.3-alpine3.20\n        container_name: riven-db\n        environment:\n            PGDATA: /var/lib/postgresql/data/pgdata\n            POSTGRES_USER: postgres\n            POSTGRES_PASSWORD: postgres\n            POSTGRES_DB: riven\n        volumes:\n            - ./riven-db:/var/lib/postgresql/data/pgdata\n        healthcheck:\n            test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n            interval: 10s\n            timeout: 5s\n            retries: 5\n</code></pre> <p>Now this won't work as is, you need to modify the <code>docker-compose.yml</code> file to match your setup.</p> <ol> <li>Change <code>TZ</code> to your timezone.</li> <li>Change <code>ORIGIN</code> to the URL you will be accessing the web interface from. For example, if you are planning to run Riven on <code>https://riven.example.com</code>,    change it to <code>https://riven.example.com</code>. This is not required if you are running riven behind a reverse proxy like <code>nginx</code>, <code>caddy</code>, <code>cosmos</code> etc.</li> <li>Change <code>BACKEND_URL</code> to the URL where the frontend can access the backend. This is not required here as we are running both frontend and backend in the same network (stack).</li> <li>Change <code>RIVEN_DATABASE_HOST</code> to the URL where the backend can access the database. This is not required here as we are running both backend and database in the same network (stack).</li> <li>Change <code>DIALECT</code> and <code>DATABASE_URL</code> to use the same database as the backend. This is not required here as we are running both backend and database in the same network (stack).</li> <li>Change <code>volumes</code> to match your setup. Riven requires access to the library folder and rclone mount path.</li> </ol>"},{"location":"#running-riven","title":"Running Riven","text":"<p>Depending on how you installed Riven, execute the following command:</p> DockerLocal <pre><code>docker-compose up -d &amp;&amp; docker-compose logs -f\n</code></pre> <p>Python Version</p> <p>Riven requires Python 3.11 or higher and <code>poetry</code> to be installed.</p> <pre><code>poetry install --without dev\npoetry run python /src/main.py\n</code></pre> <p>You can access the Riven web interface by navigating to the specified <code>ORIGIN</code> URL you entered in the <code>docker-compose.yml</code> file or your reverse proxy URL.</p> <ul> <li>Example: <code>http://localhost:3000</code></li> </ul>"},{"location":"#configuration","title":"Configuration","text":"<p>Once Riven is running, you can configure it by accessing the web interface. You will be prompted with onboarding steps to set up your debrid service, media server, content services and scraper services.</p> <p>There are 4 steps in the onboarding process.</p>"},{"location":"#step-1-general-settings","title":"Step 1: General Settings","text":"<p>In this step you configure the downloaders (debrid services), rclone mount path, library path, subtitles, etc. See the image below for an example.</p> <p></p>"},{"location":"#step-2-media-server","title":"Step 2: Media Server","text":"<p>In this step you configure the media server and updater settings. See the image below for an example.</p> <p></p>"},{"location":"#step-3-content-services","title":"Step 3: Content Services","text":"<p>In this step you configure the content services like Trakt, Overseerr, etc. See the image below for an example.</p> <p></p>"},{"location":"#step-4-scraper-services","title":"Step 4: Scraper Services","text":"<p>In this step you configure the scraper services like Torrentio, Zilean, Prowlarr, Jackett, etc. See the image below for an example.</p> <p></p> <p>Done!</p> <p>Once you have completed the onboarding process, you will be greeted with a beautiful dashboard where you can manage your media library, request items, settings and many more in the future.</p> <p></p> <p>At this point you can take a look at the services page to learn more about the various services and how to configure them.</p>"},{"location":"#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>Cross-site POST form submissions are forbidden</p> <p>The most common reason for this is that you may not have set up <code>ORIGIN</code> correctly in the <code>docker-compose.yml</code> file. If you are running Riven behind a reverse proxy, you can remove the <code>ORIGIN</code> environment variable from the <code>riven-frontend</code> service.</p> <p>I am seeing an error when trying to save changes</p> <p>If you are seeing an error when trying to save changes, it is most likely due to incorrect configuration or backend failure. Please check the logs of the Riven service to see the error message. If you are unable to resolve the issue, feel free to ask for help in the Riven Discord server.</p> <p>I am stuck in an onboarding loop</p> <p>If you are stuck in the onboarding loop, it is most likely due to incorrect symlink settings. Check your library path and rclone mount path. If they are correct, check the logs of the Riven service. If you are unable to resolve the issue, feel free to ask for help in the Riven Discord server.</p>"},{"location":"contribute/","title":"Contributing to Documentation","text":"<p>Thank you for considering contributing to Riven Media! We welcome contributions from the community to help improve and expand the project. This guide will help you get started with the process of contributing.</p>"},{"location":"contribute/#table-of-contents","title":"Table of Contents","text":"<ol> <li>How to Contribute</li> <li>Setting Up Your Development Environment</li> <li>Submitting Changes</li> <li>Community</li> </ol>"},{"location":"contribute/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contribute/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please report it by creating an issue on our GitHub repository. Provide as much detail as possible, including steps to reproduce the issue and any relevant logs or screenshots.</p>"},{"location":"contribute/#suggesting-features","title":"Suggesting Features","text":"<p>We welcome feature suggestions! To suggest a new feature, please create an issue on our GitHub repository and describe your idea in detail. Include any potential use cases and benefits of the feature.</p>"},{"location":"contribute/#contributing-code","title":"Contributing Code","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Create a new branch for your feature or bugfix.</li> <li>Write clear and concise commit messages.</li> <li>Ensure your code follows the project's coding standards and passes all tests.</li> <li>Submit a pull request to the <code>main</code> branch.</li> </ol>"},{"location":"contribute/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>To set up your development environment, follow these steps:</p> <ol> <li> <p>Clone the repository:     <pre><code>git clone https://github.com/rivenmedia/wiki riven-wiki &amp;&amp; cd riven-wiki\n</code></pre></p> </li> <li> <p>Install the required dependencies:     <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Start the development server:     <pre><code>mkdocs serve -a 0.0.0.0:8282\n</code></pre></p> </li> </ol> <p>Alternatively..</p> <p>You can also use <code>make install</code> to install the dependencies, followed by <code>make serve</code> to start the development server.</p>"},{"location":"contribute/#submitting-changes","title":"Submitting Changes","text":"<p>When submitting changes, please ensure the following:</p> <ol> <li>Your commit messages follow the Conventional Commits specification.</li> <li>Your pull request includes a clear description of the changes and the related issue (if applicable).</li> </ol>"},{"location":"contribute/#community","title":"Community","text":"<p>Join our community on Discord to discuss the project, ask questions, and collaborate with other contributors.</p> <p>Thank you for your contributions!</p>"},{"location":"frontend/item_page/","title":"The Item Page","text":"<p>This is a guide to the features found on the single item page. This page displays an item that you browsed or added to your library.</p> <p></p>"},{"location":"frontend/item_page/#manually-adding-torrents","title":"Manually adding torrents","text":"<p>Torrents can be manually added in one of two ways:</p> <ul> <li>Replacing the torrent of an already existing item in the library using a magnet link</li> <li>Replacing or adding a torrent using the \"Scrape\" button</li> </ul>"},{"location":"frontend/item_page/#using-the-scrape-button","title":"Using the \"Scrape\" button","text":"<p>Upon clicking this button the item will be scraped using the configured scraping services. A dialog will pop up that shows the user the available torrents. The user can add a torrent using the \"+\" button on the right-hand side of each row.</p> <p>Each row also displays the rank from the RTN package that Riven uses to rank the torrents. It uses the ranking settings the user configured on the backend.</p> <p></p> <p>If the torrent is cached on a downloader service, the dialog will close and a success message will be displayed on the bottom right corner of the screen. If the item hasn't yet been added to the library, it will be indexed and added. Otherwise, the current torrent for the item will be replaced and newly symlinked.</p> <p>There is also a chance the torrent isn't cached on a downloader service. Then the program will display an error message and the dialog will stay open.</p>"},{"location":"frontend/item_page/#using-the-replace-torrent-button","title":"Using the \"Replace torrent\" button","text":"<p>This option can only be accessed on an item that was already added to the user's library. You can access the sidebar by clicking the \"Manage\" button on the main page. </p> <p>If the item is a show, a dropdown will be shown where the user can select which season/episode they want to replace with the torrent. Otherwise, only the magnet text box will be shown. The same principles that were discussed in the \"Using the Scrape button\" apply to when the torrent will be actually added to the item.</p> <p></p>"},{"location":"services/","title":"Services Overview","text":"<p>Riven Media offers a variety of services to help you manage and enhance your media library. Below is a brief overview of the services we provide:</p> <p>Lists support multiple values</p> <p>Some settings have lists that support multiple values. These are noted in the description of the setting.</p> <ul> <li>Example: <code>[\"value1\", \"value2\"]</code></li> </ul>"},{"location":"services/#content-services","title":"Content Services","text":"<p>Our content services help you manage and update your media library with ease. These services include:</p> <ul> <li>Overseerr: A request management and media discovery tool.</li> <li>Plex Watchlist: Allows you to keep track of your desired media content.</li> <li>Mdblist: Provides curated lists of media content.</li> <li>Listrr: Manages movie and show lists.</li> <li>Trakt: Helps you keep track of what you're watching and discover new content.</li> </ul> <p>For more details, visit the Content Services page.</p>"},{"location":"services/#downloaders","title":"Downloaders","text":"<p>Our downloaders assist you in managing and downloading your media content efficiently. The supported downloaders include:</p> <ul> <li>Real Debrid: Provides high-speed downloads and streaming.</li> <li>All Debrid: Another high-speed downloader and streaming service.</li> <li>Torbox: Offers high-speed downloads and streaming.</li> </ul> <p>For more details, visit the Downloaders page.</p>"},{"location":"services/#scrapers","title":"Scrapers","text":"<p>Our scrapers help you gather metadata and other information for your media content. These tools ensure your media library is well-organized and up-to-date.</p> <p>For more details, visit the Scrapers page.</p>"},{"location":"services/#general-services","title":"General Services","text":"<p>In addition to the specific services mentioned above, we offer general settings and configurations that apply to all services, ensuring a seamless and customizable experience.</p> <p>For more details, visit the General Services page.</p>"},{"location":"services/extras/","title":"Management Commands","text":""},{"location":"services/extras/#resetting-the-database","title":"Resetting the Database","text":"<p>To reset the Postgres database by dropping and recreating the <code>riven</code> table, you can use the following commands:</p> <p>Danger</p> <p>This will cause all of the data in your database to be lost. To include metadata, scraped times, and other data that's needed to run Riven.</p> DockerEnv VariableLocalElfHosted <p>Make sure you have the postgres container running, and you should <code>docker stop riven</code> before running the following commands.</p> <pre><code>docker exec -it postgres psql -U postgres -c \"DROP DATABASE IF EXISTS riven;\"\ndocker exec -it postgres psql -U postgres -c \"CREATE DATABASE riven;\"\n</code></pre> <p>Set the <code>HARD_RESET</code> environment variable to <code>true</code> in your <code>.env</code> or <code>docker-compose.yml</code> file.</p> <pre><code>HARD_RESET=true\n</code></pre> <p>Then, restart Riven. Be sure to set <code>HARD_RESET</code> back to <code>false</code> after the reset is complete.</p> <p>Make sure you have the postgres container running, before running the following commands.</p> <pre><code>rm -rf data/alembic/\npoetry run python src/main.py --hard_reset_db\n</code></pre> <p>From the Riven backend (via the button on your Dashboard), press Ctrl+C twice to restart Riven. Once it does, you will see the following instructions:</p> <pre><code>\ud83d\udca5 For the option to reset your database, press the ++x++ key within 10 seconds...\n</code></pre> <p>After the database is reset, upon restarting Riven, we will load back in the symlinks and re-index your library.</p>"},{"location":"services/extras/#resetting-the-subtitles-database","title":"Resetting the Subtitles Database","text":"<p>To reset the Subtitles database by deleting the <code>subliminal.dbm*</code> files, you can use the following command:</p> Self-HostedElfHosted <pre><code>rm -r data/subliminal.dbm*\n</code></pre> <p>This needs to point to the <code>data</code> directory that the <code>settings.json</code> file is located in.</p> <p>Navigate to <code>config/riven</code> in FileBrowser, and delete all the <code>subliminal.dbm</code> files </p> <p>Warning</p> <p>This will delete all of your Subtitles database files, and you will lose all your Subtitles.</p> <p>Note</p> <p>This is not necessary and only needed if you're experiencing issues with the Subtitles specifically.</p>"},{"location":"services/extras/#trigger-symlink-repair","title":"Trigger Symlink Repair","text":"<p>To trigger a symlink repair, you can use one of the following methods:</p> LocalEnv Variable <pre><code>poetry run python /src/main.py --fix_symlinks\n</code></pre> <p>Set the <code>FIX_SYMLINKS</code> environment variable to <code>true</code> in your <code>.env</code> file.</p> <pre><code>FIX_SYMLINKS=true\n</code></pre> <p>Then, restart Riven. Be sure to set <code>FIX_SYMLINKS</code> back to <code>false</code> after the repair is complete.</p> <p>Alternatively, you can also set the symlink repair option from the Riven settings, and just lower the interval to 1 hour.</p>"},{"location":"services/content/","title":"Content Services","text":"<p>Riven supports various content services to help you manage and update your media library. Below is a list of the supported services, their configuration options, and examples of what to enter for each field.</p>"},{"location":"services/content/#available-services","title":"Available Services","text":"<ul> <li>Overseerr</li> <li>Plex Watchlist</li> <li>Mdblist</li> <li>Listrr</li> <li>Trakt</li> </ul> <p>Atleast one service must be enabled</p> <p>Atleast one service must be enabled to leverage the content services.</p>"},{"location":"services/content/#overseerr","title":"Overseerr","text":"<p>Overseerr is a request management and media discovery tool. It helps you manage requests for your media library.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 60 seconds.<ul> <li>Example: <code>60</code></li> </ul> </li> <li>url (string): The URL of your Overseerr instance. Default is \"http://localhost:5055\".<ul> <li>Example: <code>\"http://localhost:5055\"</code></li> </ul> </li> <li>api_key (string): The API key for accessing Overseerr.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>use_webhook (boolean): Boolean value to enable or disable the use of webhooks. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> </ul>"},{"location":"services/content/#setting-up-overseerr-webhook","title":"Setting up Overseerr Webhook","text":"<ul> <li>Go to the settings page on Overseerr</li> <li>Click on <code>Notifications</code></li> <li>Click on <code>Webhook</code> on the end</li> <li>Toggle <code>Enable Agent</code> so that it's enabled</li> <li>For the Webhook URL:</li> <li>Enter the FQDN, IP or <code>localhost</code> to your Riven instance, and then be sure to add <code>/api/v1/webhook/overseerr</code> at the end of it</li> <li>Leave the rest of the settings default, however you'll want to enable these Notification types:</li> <li><code>Request Automatically Approved</code></li> <li><code>Request Approved</code></li> </ul> <p>So that only approved requests will get sent from the webhook from Overseerr. Adjust this based on your needs. Any of the following examples might be correct depending on your setup.</p> <ul> <li>Example 1: <code>http://localhost:8080/api/v1/webhook/overseerr</code></li> <li>Example 2: <code>http://riven:8080/api/v1/webhook/overseerr</code></li> </ul> <p>After all that's setup, you should be good to go. If you experience any issues, double check the ip/port you're using to access the backend of Riven is correct. The backend port of Riven is <code>8080</code> by default. </p> <p></p>"},{"location":"services/content/#plex-watchlist","title":"Plex Watchlist","text":"<p>Plex Watchlist allows you to keep track of your desired media content.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 60 seconds.<ul> <li>Example: <code>60</code></li> </ul> </li> <li>rss (list of strings): A list of RSS feed URLs for your Plex Watchlist.<ul> <li>Example: <code>[\"https://rss.plex.tv/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"]</code></li> </ul> </li> </ul>"},{"location":"services/content/#mdblist","title":"Mdblist","text":"<p>Mdblist is a service that provides curated lists of media content.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 300 seconds.<ul> <li>Example: <code>300</code></li> </ul> </li> <li>api_key (string): The API key for accessing Mdblist.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>lists (list of strings): A list of Mdblist URLs for curated media lists.<ul> <li>Example: <code>[\"https://mdblist.com/lists/xxxxxxx/xxxxxxxxxx\"]</code></li> </ul> </li> </ul> <p>lists also accept a list of ids</p> <ul> <li>Example: <code>[\"123456\", \"654321\"]</code></li> </ul>"},{"location":"services/content/#listrr","title":"Listrr","text":"<p>Listrr is a service for managing movie and show lists.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 300 seconds.<ul> <li>Example: <code>300</code></li> </ul> </li> <li>movie_lists (list of ints): A list of IDs for movie lists.<ul> <li>Example: <code>[123456, 789012]</code></li> </ul> </li> <li>show_lists (list of ints): A list of IDs for show lists.<ul> <li>Example: <code>[345678, 901234]</code></li> </ul> </li> <li>api_key (string): The API key for accessing Listrr.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> </ul>"},{"location":"services/content/#trakt","title":"Trakt","text":"<p>Trakt is a service that helps you keep track of what you're watching and discover new content.</p> <p>Trakt Client ID Required</p> <p>You need to create an API app within your Trakt Profile.</p> <ol> <li>Navigate to https://trakt.tv/oauth/applications/new</li> <li>Name it whatever you like.</li> <li>For <code>Redirect uri:</code> use the default value of <code>urn:ietf:wg:oauth:2.0:oob</code>.</li> <li><code>Description:</code>, <code>Javascript (cors) origins:</code>, and <code>Permissions:</code> can be left blank/default.</li> <li>Click on <code>SAVE APP</code>.</li> <li>Use the <code>Client ID:</code> provided as your <code>Trakt Api Key</code> in the Riven settings, found in the <code>Content</code> section.</li> </ol> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 60 seconds.<ul> <li>Example: <code>60</code></li> </ul> </li> <li>api_key (string): The API key for accessing Trakt.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>watchlist (list of strings): A list of Trakt usernames.<ul> <li>Example: <code>[\"username1\", \"username2\"]</code></li> </ul> </li> <li>user_lists (list of strings): A list of Trakt user list URLs.<ul> <li>Example: <code>[\"https://trakt.tv/users/username/lists/xxxxxxxx\"]</code></li> </ul> </li> <li>collection (list of strings): A list of Trakt collection usernames.<ul> <li>Example: <code>[\"username1\", \"username2\"]</code></li> </ul> </li> <li>fetch_trending (boolean): Boolean value to enable or disable fetching trending content. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>trending_count (integer): The number of trending items to fetch. Default is 10.<ul> <li>Example: <code>10</code></li> </ul> </li> <li>fetch_popular (boolean): Boolean value to enable or disable fetching popular content. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>popular_count (integer): The number of popular items to fetch. Default is 10.<ul> <li>Example: <code>10</code></li> </ul> </li> </ul>"},{"location":"services/downloaders/","title":"Downloaders","text":"<p>Riven supports various downloaders to help you manage and download your media content. Below is a list of the supported downloaders, their configuration options, and examples of what to enter for each field.</p>"},{"location":"services/downloaders/#available-downloaders","title":"Available Downloaders","text":"<ul> <li>Real Debrid</li> <li>All Debrid</li> <li>Torbox</li> </ul> <p>Lists support multiple values</p> <p>Some settings have lists that support multiple values. These are noted in the description of the setting.</p> <ul> <li>Example: <code>[\"value1\", \"value2\"]</code></li> </ul> <p>Atleast one downloader must be enabled</p> <p>Atleast one downloader must be enabled to leverage the downloaders.</p>"},{"location":"services/downloaders/#general-settings","title":"General Settings","text":"<p>These settings apply to all downloaders.</p> <ul> <li>video_extensions (list of strings): A list of video file extensions to download.<ul> <li>Example: <code>[\"mp4\", \"mkv\", \"avi\"]</code></li> </ul> </li> <li>prefer_speed_over_quality (boolean): Boolean value to prefer download speed over video quality.<ul> <li>Example: <code>false</code></li> </ul> </li> </ul>"},{"location":"services/downloaders/#real-debrid","title":"Real Debrid","text":"<p>Real Debrid is a downloader that provides high-speed downloads and streaming.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>api_key (string): The API key for accessing Real Debrid.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>proxy_enabled (boolean): Boolean value to enable or disable the use of a proxy.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>proxy_url (string): The URL of the proxy server.<ul> <li>Example: <code>\"http://localhost:1234\"</code></li> </ul> </li> </ul>"},{"location":"services/downloaders/#all-debrid","title":"All Debrid","text":"<p>All Debrid is a downloader that provides high-speed downloads and streaming.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>api_key (string): The API key for accessing All Debrid.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>proxy_enabled (boolean): Boolean value to enable or disable the use of a proxy.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>proxy_url (string): The URL of the proxy server.<ul> <li>Example: <code>\"http://localhost:1234\"</code></li> </ul> </li> </ul>"},{"location":"services/downloaders/#torbox","title":"Torbox","text":"<p>Torbox is a downloader that provides high-speed downloads and streaming.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>api_key (string): The API key for accessing Torbox.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> </ul>"},{"location":"services/notifications/","title":"Notifications Configuration","text":"<p>Riven integrates with Apprise to send notifications upon certain events. This allows you to receive alerts when Riven completes actions related to your media libraries.</p> <p>Apprise</p> <p>Apprise is a notification library that supports multiple notification services. You can find more information about it here.</p>"},{"location":"services/notifications/#notification-settings","title":"Notification Settings","text":"<p>Below are the configurable notification settings for integrating Apprise with Riven:</p> <ul> <li>enabled (boolean): Enable or disable notifications.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>title (string): The title of the notification.<ul> <li>Example: <code>\"Riven completed something!\"</code></li> </ul> </li> <li>on_item_type (list of strings): Specifies the types of items that trigger notifications. Common types include <code>movie</code>, <code>show</code>, and <code>season</code>.<ul> <li>Example:     <pre><code>\"on_item_type\": [\"movie\", \"show\", \"season\"]\n</code></pre></li> </ul> </li> <li> <p>service_urls (list of strings): A list of Apprise service URLs to send notifications through. Each URL corresponds to a notification service provider.</p> <ul> <li>Example:     <pre><code>\"service_urls\": [\n    \"discord://xxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n]\n</code></pre></li> </ul> <p>Discord</p> <p>To get your Discord webhook URL, you can follow these steps:</p> <ul> <li>Go to your server settings.</li> <li>Navigate to the \"Integrations\" section.</li> <li>Click on \"Webhooks\" and follow the steps to create a new webhook.</li> <li>Copy the webhook URL and use it in the <code>service_urls</code> list.</li> </ul> </li> </ul>"},{"location":"services/notifications/#how-notifications-work","title":"How Notifications Work","text":"<p>Riven uses the Apprise library to handle notifications. When certain events occur, such as completing a download or processing a media item, Riven sends notifications to the configured services. Here's a breakdown of how notifications are managed:</p> <ol> <li> <p>Initialization:</p> <ul> <li>Riven initializes the Apprise notifier (<code>ntfy</code>) and loads the notification settings from the configuration.</li> <li>All service URLs provided in the <code>service_urls</code> list are added to the Apprise notifier. If adding a service URL fails, a debug message is logged.</li> </ul> </li> <li> <p>Sending Notifications:</p> <ul> <li>When an event that should trigger a notification occurs, Riven constructs a notification message based on the type of media item (e.g., movie, show, season, episode).</li> <li>The notification includes details such as the item's name and the files that were processed.</li> <li>Riven then sends the notification to all configured services. If the service is Discord, the message is formatted in Markdown for better readability.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>If sending a notification fails for a particular service, Riven logs a debug message and continues sending notifications to the remaining services.</li> </ul> </li> </ol>"},{"location":"services/notifications/#configuring-notifications","title":"Configuring Notifications","text":"<p>To set up and customize notifications in Riven, follow these steps:</p>"},{"location":"services/notifications/#1-enable-notifications","title":"1. Enable Notifications","text":"<p>Ensure that notifications are enabled in your configuration file.</p> <pre><code>\"enabled\": true\n</code></pre> <p>Setting this to <code>false</code> will disable all notifications.</p>"},{"location":"services/notifications/#2-set-the-notification-title","title":"2. Set the Notification Title","text":"<p>Customize the title of your notifications to something meaningful.</p> <pre><code>\"title\": \"Riven has updated your library!\"\n</code></pre> <p>If not set, the default title <code>\"Riven completed something!\"</code> will be used.</p>"},{"location":"services/notifications/#3-choose-item-types-for-notifications","title":"3. Choose Item Types for Notifications","text":"<p>Specify which types of media items should trigger notifications. Common types include <code>movie</code>, <code>show</code>, <code>season</code>, and <code>episode</code>.</p> <pre><code>\"on_item_type\": [\"movie\", \"show\", \"season\"]\n</code></pre> <p>Only events related to the specified item types will send notifications.</p>"},{"location":"services/notifications/#4-add-notification-services","title":"4. Add Notification Services","text":"<p>Integrate with your preferred notification services by adding their Apprise service URLs.</p>"},{"location":"services/notifications/#example-adding-a-discord-webhook","title":"Example: Adding a Discord Webhook","text":"<ol> <li> <p>Create a Discord Webhook:</p> <ul> <li>Go to your Discord server settings.</li> <li>Navigate to the \"Integrations\" section.</li> <li>Click on \"Webhooks\" and create a new webhook.</li> <li>Copy the webhook URL provided by Discord.</li> </ul> </li> <li> <p>Add the Webhook to Riven's Configuration:</p> </li> </ol> <pre><code>\"service_urls\": [\n    \"discord://your_discord_webhook_url_here/?format=markdown\"\n]\n</code></pre> <p>The <code>?format=markdown</code> query parameter ensures that messages are formatted correctly in Discord.</p>"},{"location":"services/notifications/#supported-services","title":"Supported Services","text":"<p>Apprise supports a wide range of notification services, including but not limited to:</p> <ul> <li>Email</li> <li>Slack</li> <li>Telegram</li> <li>Pushbullet</li> <li>Pushover</li> </ul> <p>And more! Refer to the Apprise documentation for a full list of supported services and how to obtain their service URLs.</p>"},{"location":"services/notifications/#5-apply-and-test-your-configuration","title":"5. Apply and Test Your Configuration","text":"<p>After updating your configuration file:</p> <ol> <li>Restart Riven to apply the changes.</li> <li>Trigger an Event that should send a notification (e.g., complete a media download).</li> <li>Verify that you receive the notification through your configured service(s).</li> </ol>"},{"location":"services/notifications/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>No Notifications Received:</p> <ul> <li>Ensure that <code>enabled</code> is set to <code>true</code>.</li> <li>Verify that your <code>service_urls</code> are correct and active.</li> <li>Check the Riven logs for any error messages related to notifications.</li> </ul> </li> <li> <p>Formatting Issues in Discord:</p> <ul> <li>Make sure the Discord webhook URL includes <code>?format=markdown</code>.</li> <li>Verify that your message content adheres to Discord's Markdown formatting rules.</li> </ul> </li> </ul>"},{"location":"services/notifications/#customizing-notification-messages","title":"Customizing Notification Messages","text":"<p>While Riven provides default templates for notification messages, you can customize them to better suit your needs.</p>"},{"location":"services/notifications/#default-message-structure","title":"Default Message Structure","text":"<p>Depending on the type of media item, the notification message will include different levels of detail.</p> <ul> <li> <p>Movie:     <pre><code>[Movie] **Example Movie**\n  - File: /path/to/movie/file.mkv\n</code></pre></p> </li> <li> <p>Show:     <pre><code>[Show] **Example Show**\n- [Season 1] **Season 1**\n  - [Episode 1] **Episode 1 Title**\n    - File: /path/to/episode/file.mkv\n</code></pre></p> </li> <li> <p>Season:     <pre><code>[Season] **Season 1**\n  - [Episode 1] **Episode 1 Title**\n    - File: /path/to/episode/file.mkv\n</code></pre></p> </li> <li> <p>Episode:     <pre><code>[Episode] **Episode 1 Title**\n  - File: /path/to/episode/file.mkv\n</code></pre></p> </li> </ul>"},{"location":"services/notifications/#advanced-customization","title":"Advanced Customization","text":"<p>Apprise Config Files</p> <p>For advanced users who wish to further customize the notification behavior or message format, you can also use config files with Apprise. Just add the path to the <code>service_urls</code> list!</p>"},{"location":"services/notifications/#notification-flow-diagram","title":"Notification Flow Diagram","text":"<pre><code>graph LR;\n    A[Item Completed] ==&gt; B{Notifications Enabled?}\n    B ==&gt;|Yes| C[Build Notification Message]\n    B ==&gt;|No| D[Do Nothing]\n    C ==&gt; E[Send to All Service URLs]\n    E ==&gt; F{Service Type}\n    F ==&gt;|Discord| G[Format Message in Markdown]\n    F ==&gt;|Other| H[Send Notification]\n    G ==&gt; H</code></pre>"},{"location":"services/scrapers/","title":"Scrapers","text":"<p>Riven supports various scrapers to help you gather metadata and other information for your media content. Below is a list of the supported scrapers, their configuration options, and examples of what to enter for each field.</p>"},{"location":"services/scrapers/#available-scrapers","title":"Available Scrapers","text":"<ul> <li>Torrentio</li> <li>Knightcrawler</li> <li>Jackett</li> <li>Prowlarr</li> <li>Orionoid</li> <li>Annatar</li> <li>Torbox Scraper</li> <li>Mediafusion</li> <li>Zilean</li> <li>Comet</li> </ul> <p>Atleast one scraper must be enabled</p> <p>Atleast one scraper must be enabled to leverage the scrapers.</p>"},{"location":"services/scrapers/#torrentio","title":"Torrentio","text":"<p>Torrentio is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>filter (string): Filter to apply to the results. Default is \"qualityfilter=other,scr,cam\".<ul> <li>Example: <code>\"qualityfilter=other,scr,cam\"</code></li> </ul> </li> <li>url (string): The URL of the Torrentio instance. Default is \"http://torrentio.strem.fun\".<ul> <li>Example: <code>\"http://torrentio.strem.fun\"</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 30 seconds.<ul> <li>Example: <code>30</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#knightcrawler","title":"Knightcrawler","text":"<p>Knightcrawler is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>filter (string): Filter to apply to the results. Default is \"sort=qualitysize%7Cqualityfilter=480p,scr,cam,unknown\".<ul> <li>Example: <code>\"sort=qualitysize%7Cqualityfilter=480p,scr,cam,unknown\"</code></li> </ul> </li> <li>url (string): The URL of the Knightcrawler instance. Default is \"https://knightcrawler.elfhosted.com/\".<ul> <li>Example: <code>\"https://knightcrawler.elfhosted.com/\"</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 30 seconds.<ul> <li>Example: <code>30</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#jackett","title":"Jackett","text":"<p>Jackett is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>url (string): The URL of the Jackett instance. Default is \"http://localhost:9117\".<ul> <li>Example: <code>\"http://localhost:9117\"</code></li> </ul> </li> <li>api_key (string): The API key for accessing Jackett.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 10 seconds.<ul> <li>Example: <code>10</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#prowlarr","title":"Prowlarr","text":"<p>Prowlarr is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>url (string): The URL of the Prowlarr instance. Default is \"http://localhost:9696\".<ul> <li>Example: <code>\"http://localhost:9696\"</code></li> </ul> </li> <li>api_key (string): The API key for accessing Prowlarr.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 10 seconds.<ul> <li>Example: <code>10</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>limiter_seconds (integer): The number of seconds to wait between requests. Default is 60 seconds.<ul> <li>Example: <code>60</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#orionoid","title":"Orionoid","text":"<p>Orionoid is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>api_key (string): The API key for accessing Orionoid.<ul> <li>Example: <code>\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"</code></li> </ul> </li> <li>cached_results_only (boolean): Boolean value to enable or disable cached results only. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>parameters (object): Additional parameters for the scraper. (Optional)<ul> <li>video3d (string): Whether to include 3D videos. Default is \"false\".<ul> <li>Example: <code>\"false\"</code></li> </ul> </li> <li>videoquality (string): The quality of the videos to include. Default is \"sd_hd8k\".<ul> <li>Example: <code>\"sd_hd8k\"</code></li> </ul> </li> <li>limitcount (integer): The maximum number of results to return. Default is 5.<ul> <li>Example: <code>5</code></li> </ul> </li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 30 seconds.<ul> <li>Example: <code>30</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#annatar","title":"Annatar","text":"<p>Annatar is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>url (string): The URL of the Annatar instance. Default is \"https://annatar.elfhosted.com\".<ul> <li>Example: <code>\"https://annatar.elfhosted.com\"</code></li> </ul> </li> <li>limit (integer): The maximum number of results to return. Default is 2000.<ul> <li>Example: <code>2000</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 10 seconds.<ul> <li>Example: <code>10</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#torbox-scraper","title":"Torbox Scraper","text":"<p>Torbox Scraper is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 30 seconds.<ul> <li>Example: <code>30</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#mediafusion","title":"Mediafusion","text":"<p>Mediafusion is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>url (string): The URL of the Mediafusion instance. Default is \"https://mediafusion.elfhosted.com\".<ul> <li>Example: <code>\"https://mediafusion.elfhosted.com\"</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 10 seconds.<ul> <li>Example: <code>10</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>catalogs (list of strings): A list of catalogs to include.<ul> <li>Example: <code>[]</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#zilean","title":"Zilean","text":"<p>Zilean is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>url (string): The URL of the Zilean instance. Default is \"http://localhost:8181\".<ul> <li>Example: <code>\"http://localhost:8181\"</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 30 seconds.<ul> <li>Example: <code>30</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> </ul>"},{"location":"services/scrapers/#comet","title":"Comet","text":"<p>Comet is a scraper that provides high-quality torrent links.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>url (string): The URL of the Comet instance. Default is \"http://localhost:8000\".<ul> <li>Example: <code>\"http://localhost:8000\"</code></li> </ul> </li> <li>indexers (list of strings): A list of indexers to include.<ul> <li>Example: <code>[]</code></li> </ul> </li> <li>timeout (integer): The timeout in seconds for the scraper. Default is 30 seconds.<ul> <li>Example: <code>30</code></li> </ul> </li> <li>ratelimit (boolean): Boolean value to enable or disable rate limiting. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> </ul>"},{"location":"services/subtitles/","title":"Subtitles Configuration","text":"<p>Riven supports various subtitle providers to help you manage and download subtitles for your media content. Below is a list of the supported subtitle providers, their configuration options, and examples of what to enter for each field.</p>"},{"location":"services/subtitles/#available-providers","title":"Available Providers","text":"<ul> <li>Subliminal</li> <li>OpenSubtitles</li> <li>OpenSubtitles.com</li> </ul> <p>Subliminal</p> <p>Subliminal is a subtitle provider that supports multiple languages and providers. It integrates with various subtitle services to fetch the best subtitles for your media content.</p> <p>More information can be found at the Subliminal GitHub.</p>"},{"location":"services/subtitles/#subliminal","title":"Subliminal","text":"<p>Subliminal is a subtitle provider that supports multiple languages and providers. It integrates with various subtitle services to fetch the best subtitles for your media content.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>languages (list of strings): A list of languages for which subtitles should be downloaded. Default is <code>[\"eng\"]</code>.<ul> <li>Example: <code>[\"eng\", \"spa\", \"fre\"]</code></li> </ul> </li> <li>providers (object): An object containing the configuration for each subtitle provider.</li> </ul>"},{"location":"services/subtitles/#providers-configuration","title":"Providers Configuration","text":"<p>These are additional providers that you can add to your configuration.</p>"},{"location":"services/subtitles/#opensubtitles","title":"OpenSubtitles","text":"<p>OpenSubtitles is a popular subtitle provider.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the provider. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>username (string): The username for accessing OpenSubtitles. (Optional)<ul> <li>Example: <code>\"your_username\"</code></li> </ul> </li> <li>password (string): The password for accessing OpenSubtitles. (Optional)<ul> <li>Example: <code>\"your_password\"</code></li> </ul> </li> </ul>"},{"location":"services/subtitles/#opensubtitlescom","title":"OpenSubtitles.com","text":"<p>OpenSubtitles.com is another popular subtitle provider.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the provider. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>username (string): The username for accessing OpenSubtitles.com. (Optional)<ul> <li>Example: <code>\"your_username\"</code></li> </ul> </li> <li>password (string): The password for accessing OpenSubtitles.com. (Optional)<ul> <li>Example: <code>\"your_password\"</code></li> </ul> </li> </ul> <p>Optional Authentication</p> <p>OpenSubtitles and OpenSubtitles.com don't require additional authentication and can be used once enabled.</p> <p>How Subliminal Works</p> <p>Subliminal is a powerful library that works by searching for subtitles in your media library and downloading them. It uses the configured providers to search for and download subtitles. You can find more information as to how providers work here.</p>"},{"location":"services/subtitles/#how-subtitles-work","title":"How Subtitles Work","text":"<p>Riven uses the Subliminal library to handle subtitles. When enabled, Subliminal will scan your media library for video files and download the best available subtitles in the specified languages. Here is a brief overview of how the process works:</p> <ol> <li> <p>Initialization:</p> <ul> <li>Subliminal initializes with the configured providers and their credentials.</li> <li>It sets up a cache to store subtitle data and avoid redundant downloads.</li> </ul> </li> <li> <p>Scanning for Videos:</p> <ul> <li>Subliminal scans the symlink library path for video files.</li> <li>It identifies existing subtitles and their languages.</li> </ul> </li> <li> <p>Downloading Subtitles:</p> <ul> <li>Subliminal fetches the best available subtitles for each video in the specified languages.</li> <li>It uses the configured providers to search for and download subtitles.</li> </ul> </li> <li> <p>Saving Subtitles:</p> <ul> <li>Subliminal saves the downloaded subtitles to the appropriate location.</li> <li>It logs the details of the downloaded subtitles for reference.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>If a provider fails to initialize or authenticate, Subliminal logs a warning and continues with the remaining providers.</li> <li>It ensures that the subtitle download process is robust and handles errors gracefully.</li> </ul> </li> </ol> <p>By configuring Subliminal and its providers, you can ensure that your media content always has the best available subtitles in your preferred languages.</p>"},{"location":"services/symlink/","title":"Symlink Services","text":"<p>Riven supports various symlink configurations to help you manage and organize your media libraries within the docker container. Below is a list of the supported symlink configurations, their options, and examples of what to enter for each field.</p> <p>How it works</p> <p>We symlink the files after they have been downloaded, so we can stream them directly from the remote storage.</p>"},{"location":"services/symlink/#symlink-configuration","title":"Symlink Configuration","text":"<p>This section is for setting up your symlinks in regards to how they match inside the docker container. Users will need to be extra careful as to make sure that the rclone path and library paths are owned by the user, and exist.</p> <ul> <li>rclone_path (string): The path where rclone mounts your remote storage. If you are using Zurg, point this to the <code>__all__</code> directory, which is always created by default and displays all files collectively.<ul> <li>Example with Zurg: <code>\"/mnt/zurg/__all__\"</code></li> <li>Example without Zurg: <code>\"/mnt/zurg\"</code></li> </ul> </li> <li> <p>library_path (string): The path to your local media library.</p> <ul> <li>Example: <code>\"/mnt/library\"</code></li> </ul> <p>Availability and Permissions</p> <p>Before starting the docker container, ensure that both the <code>rclone_path</code> and <code>library_path</code> exist and have the correct permissions.</p> <p>These paths must be compatible with the Riven application and the media player you are using. For instance, if Riven runs with user ID 1000, then both paths should be owned by user ID 1000, and this applies to Plex as well.</p> </li> <li> <p>separate_anime_dirs (boolean): Boolean value to enable or disable separate directories for anime</p> <ul> <li>Example: <code>false</code></li> </ul> <p>Set this during initial setup!</p> <p>This is very important to set during initial setup, as it will ensure that your media libraries are organized correctly.</p> </li> <li> <p>repair_symlinks (boolean): Boolean value to enable or disable automatic repair of broken symlinks</p> <ul> <li>Example: <code>false</code></li> </ul> <p>Use often, but not too often!</p> <p>This can be useful as symlinks can sometimes get broken, and this will help you fix them.</p> <p>How it works</p> <p>We will crawl the library path, and if a symlink is broken (no longer points to a valid file), we will try to search for the file and create a new symlink. If we cannot find the file, we will remove the symlink, and update the item in the database. Causing it to get re-scraped.</p> </li> <li> <p>repair_interval (float): The interval in hours at which the symlinks will be checked and repaired if necessary.</p> <ul> <li>Example: <code>72.0</code></li> </ul> </li> </ul>"},{"location":"services/symlink/#rclone-required","title":"Rclone (required)","text":"<p>We have seen that running this as a systemd service is the most reliable way to ensure that the symlinks are created and maintained correctly.</p> <p>Open up your favorite text editor, and add the following configuration:</p> /etc/systemd/system/rclone.service<pre><code>[Unit]\nDescription=Rclone Mount Service\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/rclone mount zurg:__all__ /mnt/zurg --allow-other --dir-cache-time 10s --vfs-cache-mode full --vfs-read-chunk-size 8M --vfs-read-chunk-size-limit 2G --buffer-size 16M --vfs-cache-max-age 150h --vfs-cache-max-size 20G --vfs-fast-fingerprint --uid 1000 --gid 1000\nExecStop=/bin/fusermount -u /mnt/zurg\nRestart=always\nUser=riven\nGroup=riven\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Permissions</p> <p>Ensure that the user and group are correct for your setup. This example uses <code>riven</code> as the user and group. Also be sure to adjust the <code>uid</code> and <code>gid</code> to your own user and group.</p> <p>These settings have worked well for me, but consider testing with your own setup.</p> <p>After adding the configuration, restart the service with the following command:</p> <pre><code>sudo systemctl daemon-reload &amp;&amp; \\\nsudo systemctl enable rclone &amp;&amp; \\\nsudo systemctl start rclone\n</code></pre> <p>Validate the setup</p> <p>You can validate the setup by running the following command:</p> <pre><code>sudo systemctl status rclone\n</code></pre> <p>And making sure that files are properly loaded into the mount point. In this example, it would be <code>/mnt/zurg</code> if you are using Zurg.</p> <pre><code>ls -al /mnt/zurg\n</code></pre>"},{"location":"services/symlink/#zurg-optional","title":"Zurg (optional)","text":"<p>When using Zurg, ensure that your <code>rclone_path</code> points to the <code>__all__</code> directory (<code>/mnt/zurg/__all__</code>) to leverage Zurg's capabilities effectively. This directory aggregates all files, providing a unified view.</p>"},{"location":"services/symlink/#configuring-zurg-with-riven-symlinks","title":"Configuring Zurg with Riven Symlinks","text":"<ol> <li>Set the <code>rclone_path</code> to <code>/mnt/zurg/__all__</code> in your symlink configuration. This ensures that all media files are accessible through the aggregated <code>__all__</code> directory.</li> <li>Ensure Zurg is configured correctly by following the Zurg Configuration Documentation, which includes setting up the <code>config.yaml</code> with appropriate filters and directory definitions.</li> <li>Verify Permissions: Make sure that both the <code>rclone</code> mount point and the library paths are owned by the user running the docker container to avoid permission issues.</li> <li>Restart Services: After configuration, restart the Riven and Zurg services to apply the changes.</li> </ol> <p>Zurg Configuration</p> <p>When configuring Zurg, ensure that the following settings are included in your <code>config.yaml</code> to maintain proper folder and torrent naming conventions:</p> <ul> <li>retain_folder_name_extension (boolean): This setting should be set to <code>true</code> to retain the folder name extension.<ul> <li>Example: <code>retain_folder_name_extension: true</code></li> </ul> </li> <li>retain_rd_torrent_name (boolean): This setting should be set to <code>true</code> to retain the Real-Debrid torrent name.<ul> <li>Example: <code>retain_rd_torrent_name: true</code></li> </ul> </li> </ul> <p>Be sure to add the configuration file to setup Zurg. More information can be found here.</p> ~/.config/rclone/rclone.conf<pre><code>[zurg]\ntype = webdav\nurl = http://localhost:9999/dav  # Change this to your Zurg URL with `/dav` at the end\nvendor = other\npacer_min_sleep = 0\n</code></pre> <p>The latest configuration file for Zurg can be found here.</p>"},{"location":"services/updaters/","title":"Updater Services","text":"<p>Riven supports various updaters to help you manage and update your media libraries. Below is a list of the supported updaters, their configuration options, and examples of what to enter for each field.</p> <p>Tip</p> <p>We label them as \"Updaters\" here, which is just an alias for \"Media Servers\".</p>"},{"location":"services/updaters/#available-updaters","title":"Available Updaters","text":"<ul> <li>Plex</li> <li>Jellyfin</li> <li>Emby</li> </ul> <p>How it works</p> <p>After an item has been added to your library, we update the corresponding media library.</p>"},{"location":"services/updaters/#plex","title":"Plex","text":"<p>Plex is a media server that organizes your media and streams it to your devices.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the updater. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>token (string): The token for accessing Plex.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>url (string): The URL of your Plex server. Default is \"http://localhost:32400\".<ul> <li>Example: <code>\"http://localhost:32400\"</code></li> </ul> </li> </ul>"},{"location":"services/updaters/#jellyfin","title":"Jellyfin","text":"<p>Jellyfin is a free software media system that puts you in control of managing and streaming your media.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the updater. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>api_key (string): The API key for accessing Jellyfin.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>url (string): The URL of your Jellyfin server. Default is \"http://localhost:8096\".<ul> <li>Example: <code>\"http://localhost:8096\"</code></li> </ul> </li> </ul>"},{"location":"services/updaters/#emby","title":"Emby","text":"<p>Emby is a media server designed to organize, play, and stream audio and video to a variety of devices.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the updater. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>api_key (string): The API key for accessing Emby.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>url (string): The URL of your Emby server. Default is \"http://localhost:8096\".<ul> <li>Example: <code>\"http://localhost:8096\"</code></li> </ul> </li> </ul>"},{"location":"services/updaters/#updater-interval","title":"Updater Interval","text":"<p>The interval in seconds at which the updaters will check for updates. Default is 120 seconds.</p> <ul> <li>updater_interval (integer): The interval in seconds.<ul> <li>Example: <code>120</code></li> </ul> </li> </ul>"}]}